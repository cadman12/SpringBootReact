package edu.pnu.config;

import java.io.IOException;
import java.net.URLEncoder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import edu.pnu.domain.Member;
import edu.pnu.domain.Role;
import edu.pnu.repository.MemberRepository;
import edu.pnu.util.CustomMyUtil;
import edu.pnu.util.JWTUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class OAuth2SuccessHandler extends SimpleUrlAuthenticationSuccessHandler {
	
	@Autowired
	private MemberRepository memRepo;
	
	@Autowired
	private PasswordEncoder encoder;
	
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
											Authentication authentication) throws IOException, ServletException {
		OAuth2User user = (OAuth2User)authentication.getPrincipal();
		// 임의의 사용자를 만들어서 서버에 저장
		String username = CustomMyUtil.getUsernameFromOAuth2User(user);
		if (username == null) {
			System.out.println("onAuthenticationSuccess:Cannot generate username from oauth2user!");
			throw new ServletException("Cannot generate username from oauth2user!");
		}
		System.out.println("onAuthenticationSuccess:" + username);
		memRepo.save(Member.builder()
						.username(username)
						.password(encoder.encode("1a2s3d4f"))
						.role(Role.ROLE_USER)
						.enabled(true).build());
		String jwtToken = JWTUtil.getJWT(username);
		
		Cookie jwtCookie = new Cookie("jwtToken", URLEncoder.encode(jwtToken, "utf-8"));
		jwtCookie.setHttpOnly(true);	// XSS 공격 방지
		jwtCookie.setMaxAge(10);		// 쿠키 유효 시간 설정(10초)
		response.addCookie(jwtCookie);
		
		System.out.println("OnAuthenticationSuccess");
		response.sendRedirect("http://localhost:3000/oauth2/callback");
	}
}
